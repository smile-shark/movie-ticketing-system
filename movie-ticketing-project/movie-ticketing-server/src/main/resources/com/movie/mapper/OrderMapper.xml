<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.movie.mapper.OrderMapper">
    <insert id="insertOrder">
        insert into `order`
        (order_id, user_id, slice_arrangement_id, vote_all_price, seats, code_image)
        values
        (#{order.orderId},
         #{order.userId},
         #{order.sliceArrangementId},
         #{order.voteAllPrice},
         #{order.seats},
         #{order.codeImage})
    </insert>
    <select id="selectOrderByUserIdNotPayOne" resultType="order">
        select * from `order` where user_id = #{userId} and vote_pay_state = 0 and pay_timeout &gt; now() limit 1
    </select>
    <select id="selectOrderByOrderId" resultType="order">
        select * from `order` where order_id=#{orderId}
    </select>
    <update id="updateOrderStatus">
        update `order`
        set vote_pay_state=#{status}
        where order_id=#{orderId}
    </update>
    <resultMap id="selectOrderBySliceArrangementIdMap" type="order">
        <id property="orderId" column="order_id"/>
        <result property="userId" column="user_id"/>
        <association property="user" column="user_id"
                     select="com.movie.mapper.UserMapper.selectUserByUserId"/>
    </resultMap>
    <select id="selectOrderBySliceArrangementId" resultMap="selectOrderBySliceArrangementIdMap">
        select * from `order` where slice_arrangement_id=#{sliceArrangementId}
    </select>
    <select id="selectTimeOutOrderAndNotUpdateState" resultType="order">
        select * from `order`
        where vote_pay_state=0 and pay_timeout &lt; now()
    </select>
    <resultMap id="selectOrderDetailByOrderIdMap" type="order">
        <id property="orderId" column="order_id"/>
        <result property="sliceArrangementId" column="slice_arrangement_Id"/>
        <association property="sliceArrangement" column="slice_arrangement_id"
                     select="com.movie.mapper.SliceArrangementMapper.selectDetailSliceArrangementBySliceArrangementId"/>
    </resultMap>
    <select id="selectOrderDetailByOrderId" resultMap="selectOrderDetailByOrderIdMap">
        select * from `order` where order_id=#{orderId}
    </select>
    <select id="selectOrderDetailListByOrder" resultMap="selectOrderDetailByOrderIdMap">
        select * from `order`
        <where>
            <if test="order.orderId!=null">
              and  order_id=#{order.orderId}
            </if>
            <if test="order.userId!=null">
                and user_id=#{order.userId}
            </if>
        <if test="order.sliceArrangementId!=null">
            and slice_arrangement_id=#{order.sliceArrangementId}
        </if>
        <if test="order.votePayState!=null">
            vote_pay_state=#{order.votePayState}
        </if>
        <if test="order.createTime!=null">
            create_time &gt; #{order.createTime}
        </if>
        </where>
        order by create_time desc
    </select>
    <select id="selectOrderNumByTime" resultType="int">
        select count(`order`.order_id)
        from `order`
                 join movie_ticketing_system.slice_arrangement sa
                      on `order`.slice_arrangement_id = sa.slice_arrangement_id
        where create_time &gt; #{startTime}
          and create_time &lt; #{endTime}
          and vote_pay_state = 1
          and sa.cinema_id = #{cinemaId}
    </select>
    <select id="selectOrderVoteAllPriceByTime" resultType="double">
        select coalesce(sum(`order`.vote_all_price),0)
        from `order`
                 join movie_ticketing_system.slice_arrangement sa
                      on `order`.slice_arrangement_id = sa.slice_arrangement_id
        where create_time &gt; #{startTime}
          and create_time &lt; #{endTime}
          and vote_pay_state = 1
          and sa.cinema_id = #{cinemaId}
    </select>
    <select id="selectAllOrderPrice" resultType="double">
        select coalesce(sum(`order`.vote_all_price),0)
        from `order`
                 join movie_ticketing_system.slice_arrangement sa
                      on `order`.slice_arrangement_id = sa.slice_arrangement_id
        where vote_pay_state = 1
          and sa.cinema_id = #{cinemaId}
    </select>
    <resultMap id="selectChartValueByTimeMap" type="chartValue">
        <result property="value" column="revenue"/>
        <result property="name" column="movie_name"/>
    </resultMap>
    <select id="selectChartValueByTimeAndMovie" resultMap="selectChartValueByTimeMap">
        select
            movie_name,
            coalesce(sum(`order`.vote_all_price), 0) as revenue
        from `order`
                 join slice_arrangement sa
                      on `order`.slice_arrangement_id = sa.slice_arrangement_id
                 join movie m
                      on sa.movie_id = m.movie_id
        where create_time &gt; #{startTime}
          and create_time &lt; #{endTime}
          and vote_pay_state = 1
          and sa.cinema_id = #{cinemaId}
        group by
            sa.movie_id
    </select>
    <resultMap id="selectChartValueByTimeAndScreeningRoomMap" type="chartValue">
        <result property="value" column="revenue"/>
        <result property="name" column="screening_room_name"/>
    </resultMap>
    <select id="selectChartValueByTimeAndScreeningRoom" resultMap="selectChartValueByTimeAndScreeningRoomMap">
        select
            screening_room_name,
            coalesce(sum(`order`.vote_all_price), 0) as revenue
        from `order`
                 join slice_arrangement sa
                      on `order`.slice_arrangement_id = sa.slice_arrangement_id
                 join screening_room sr
                     on sa.screening_room_id = sr.screening_room_id
        where create_time &gt; #{startTime}
          and create_time &lt; #{endTime}
          and vote_pay_state = 1
          and sa.cinema_id = #{cinemaId}
        group by
            sa.screening_room_id
    </select>
</mapper>